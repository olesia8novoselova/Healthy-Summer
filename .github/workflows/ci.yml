name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  GO_VERSION: '1.24.3'
  FLUTTER_VERSION: '3.32.1'

jobs:
  full-checks:
    name: Lint, Unit & Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17.5
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [5432:5432]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}

      - name: Cache Flutter packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            frontend/.dart_tool
          key: ${{ runner.os }}-flutter-${{ hashFiles('frontend/pubspec.lock') }}

      - name: Install Go deps
        run: cd backend && go mod download

      - name: Install Flutter deps
        run: cd frontend && flutter pub get

      - name: Run Makefile checks
        run: make test lint test-integration

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: full-checks

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}

      - name: Cache Flutter packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            frontend/.dart_tool
          key: ${{ runner.os }}-flutter-${{ hashFiles('frontend/pubspec.lock') }}

      - name: Install backend deps
        run: cd backend && go mod download

      - name: Install frontend deps
        run: cd frontend && flutter pub get

      - name: Build backend binaries
        working-directory: backend
        run: |
          CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o bin/server cmd/server/main.go
          CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o bin/migrate cmd/migrate/main.go

      - name: Build frontend (web)
        working-directory: frontend
        run: |
          flutter build web --release \
            --dart-define=API_BASE_URL=https://sum25-go-flutter-course.onrender.com \
            --base-href="/${{ github.repository }}/"

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-web
          path: frontend/build/web

  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      IMAGE_BACKEND: ${{ secrets.DOCKERHUB_USERNAME }}/course-backend
      IMAGE_FRONTEND: ${{ secrets.DOCKERHUB_USERNAME }}/course-frontend
      TAG_BRANCH: ${{ github.ref_name }}     
      TAG_SHA: ${{ github.sha }}            

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.ref == 'refs/heads/main' && env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_PASSWORD != ''
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_PASSWORD }}

      - name: Build & push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.IMAGE_BACKEND }}:${{ env.TAG_BRANCH }}
            ${{ env.IMAGE_BACKEND }}:${{ env.TAG_SHA }}

      - name: Build & push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          platforms: linux/amd64,linux/arm64
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.IMAGE_FRONTEND }}:${{ env.TAG_BRANCH }}
            ${{ env.IMAGE_FRONTEND }}:${{ env.TAG_SHA }}


  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name == 'pull_request'
    steps:
      - run: |
          echo "ðŸš€ Deploying preview for PR #${{ github.event.number }}"
          echo "Preview URL: https://preview-${{ github.event.number }}.course.example.com"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-web
          path: web-dist
      - run: find web-dist -maxdepth 3 -print
      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: web-dist
          publish_branch: gh-pages
          keep_files: false
